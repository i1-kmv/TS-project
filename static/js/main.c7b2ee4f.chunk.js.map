{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","TextField","variant","label","value","onChange","e","currentTarget","onKeyPress","charCode","trim","addItem","helperText","IconButton","onClick","color","ControlPoint","className","EditableSpan","editMode","changeEditMode","title","setTitle","autoFocus","onBlur","onDoubleClick","TodoList","tasks","map","task","key","id","isDone","Checkbox","checked","changeTaskStatus","newValue","changeTaskTitle","onDeleteTask","aria-label","changeTodoListTitle","removeTodoList","onAddTask","Button","size","filter","changeFilter","initialState","v1","AppWithRedux","todoLists","useSelector","state","dispatch","useDispatch","todoListId","action","taskId","type","removeTaskAC","taskTitle","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","removeTodoListAC","changeTodoListTitleAC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","style","padding","addTodoListAC","spacing","t","tasksForTodoList","item","Paper","rootReducer","combineReducers","newState","todoList","find","tl","stateCopy","filteredTasks","newTask","newTasks","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCVOC,EAAc,SAACC,GAAiC,IAAD,EAChBC,mBAAS,IADO,mBACjDC,EADiD,KACnCC,EADmC,OAE9BF,oBAAS,GAFqB,mBAEjDG,EAFiD,KAE1CC,EAF0C,KAyBxD,OACI,6BACI,kBAACC,EAAA,EAAD,CACIC,QAAS,WACTC,MAAM,kBACNC,MAAOP,EACPQ,SA5BoB,SAACC,GAC7BR,EAAgBQ,EAAEC,cAAcH,QA4BxBI,WAlBc,SAACF,GAEvB,GADAN,GAAS,GACU,KAAfM,EAAEG,SAAiB,CACnB,GAA4B,KAAxBZ,EAAaa,OACb,OAAOV,GAAS,GAEpBL,EAAMgB,QAAQd,GACdC,EAAgB,MAYZC,QAASA,EACTa,WAAYb,IAEhB,kBAACc,EAAA,EAAD,CACIC,QA/BI,WACZ,GAA4B,KAAxBjB,EAAaa,OACb,OAAOV,GAAS,GAEpBL,EAAMgB,QAAQd,GACdC,EAAgB,KA2BRiB,MAAO,WAEP,kBAACC,EAAA,EAAD,OAEHjB,GAAS,yBAAKkB,UAAU,iBAAf,uBC3CTC,EAAe,SAACvB,GAAkC,IAAD,EACzBC,oBAAS,GADgB,mBACrDuB,EADqD,KAC3CC,EAD2C,OAElCxB,mBAASD,EAAMS,OAFmB,mBAErDiB,EAFqD,KAE9CC,EAF8C,KAiB1D,OAAOH,EACD,kBAAClB,EAAA,EAAD,CAAWG,MAAOiB,EAAOhB,SALX,SAACC,GACjBgB,EAAShB,EAAEC,cAAcH,QAIyBmB,WAAS,EAACC,OATpC,WACxBJ,GAAe,GACfzB,EAAMU,SAASgB,MAQb,0BAAMI,cAda,WACrBL,GAAe,GACfE,EAAS3B,EAAMS,SAY2BT,EAAMS,Q,mCCCjD,SAASsB,EAAS/B,GAErB,IAOIgC,EAAQhC,EAAMgC,MAAMC,KAAI,SAAAC,GAYxB,OAAO,yBAAKC,IAAKD,EAAKE,GAAId,WAA2B,IAAhBY,EAAKG,OAAkB,YAAc,IACtE,kBAACC,EAAA,EAAD,CACUlB,MAAO,UACPmB,QAASL,EAAKG,OACd3B,SAXgB,SAACC,GAC3BX,EAAMwC,iBAAiBN,EAAKE,GAAIzB,EAAEC,cAAc2B,QAASvC,EAAMoC,OAY/D,kBAAC,EAAD,CAAc3B,MAAOyB,EAAKR,MAAOhB,SAVR,SAAC+B,GAC1BzC,EAAM0C,gBAAgBR,EAAKE,GAAIK,EAAUzC,EAAMoC,OAU/C,kBAAClB,EAAA,EAAD,CAAYC,QAjBK,WACjBnB,EAAM2C,aAAaT,EAAKE,GAAIpC,EAAMoC,KAgBCQ,aAAW,UAC1C,kBAAC,IAAD,WAeZ,OAAQ,6BACJ,4BAAI,kBAAC,EAAD,CAAcnC,MAAOT,EAAM0B,MAAOhB,SANP,SAAC+B,GAChCzC,EAAM6C,oBAAoBJ,EAAUzC,EAAMoC,OAMtC,kBAAClB,EAAA,EAAD,CAAYC,QAzCG,WACnBnB,EAAM8C,eAAe9C,EAAMoC,KAwCcQ,aAAW,UAC5C,kBAAC,IAAD,QAGR,kBAAC,EAAD,CAAa5B,QAfC,SAACU,GACf1B,EAAM+C,UAAUrB,EAAO1B,EAAMoC,OAe7B,4BACKJ,GAEL,6BACI,kBAACgB,EAAA,EAAD,CACIC,KAAM,QACN1C,QAA0B,QAAjBP,EAAMkD,OAAmB,YAAc,OAChD/B,QAxDQ,kBAAMnB,EAAMmD,aAAa,MAAOnD,EAAMoC,MAqDlD,OAKA,kBAACY,EAAA,EAAD,CACIC,KAAM,QACN7B,MAAO,UACPb,QAA0B,WAAjBP,EAAMkD,OAAsB,YAAc,OACnD/B,QA7DW,kBAAMnB,EAAMmD,aAAa,SAAUnD,EAAMoC,MAyDxD,UAMA,kBAACY,EAAA,EAAD,CACIC,KAAM,QACN7B,MAAO,YACPb,QAA0B,cAAjBP,EAAMkD,OAAyB,YAAc,OACtD/B,QAlEc,kBAAMnB,EAAMmD,aAAa,YAAanD,EAAMoC,MA8D9D,e,mFCtDNgB,GAHmBC,cACAA,cAEiB,I,QCWpCD,EAA+B,G,QCyFtBE,MAhHf,WAII,IAAMC,EAAYC,aAA+C,SAAAC,GAAK,OAAIA,EAAMF,aAC1EvB,EAAQwB,aAA0C,SAAAC,GAAK,OAAIA,EAAMzB,SACjE0B,EAAWC,cAGXhB,EAAe,SAACP,EAAYwB,GAC9B,IAAMC,EDHc,SAAEC,EAAgBF,GAC1C,MAAO,CAAEG,KAAM,cAAeD,SAAQF,cCEnBI,CAAa5B,EAAIwB,GAChCF,EAASG,IAGPd,EAAY,SAAC7C,EAAsB0D,GACrC,IAAMC,EDLW,SAAEI,EAAmBL,GAC1C,MAAO,CAAEG,KAAM,WAAYE,YAAaL,cCIrBM,CAAUhE,EAAc0D,GACvCF,EAASG,IAIPM,EAAe,SAACL,EAAgBzB,EAAiBuB,GACnD,IAAMC,EDRoB,SAAEC,EAAerD,EAAemD,GAC9D,MAAO,CAAEG,KAAM,iBAAkBD,SAAQrD,QAAQmD,cCO9BQ,CAAmBN,EAAQzB,EAAQuB,GAClDF,EAASG,IAGPnB,EAAkB,SAACoB,EAAgBO,EAAkBT,GACvD,IAAMC,EDVmB,SAAEC,EAAgBG,EAAkBL,GACjE,MAAO,CAAEG,KAAM,oBAAqBD,SAAQG,YAAYL,cCSrCU,CAAkBR,EAAQO,EAAST,GAClDF,EAASG,IAIPV,EAAe,SAAC1C,EAAyBmD,GAC3C,IAAMC,EF1BH,CAAEE,KAAM,yBAAyBb,OE0BEzC,EF1BM2B,GE0BCwB,GAC7CF,EAASG,IAIPf,EAAiB,SAACc,GACpB,IAAMC,EF1CkB,SAACD,GAC7B,MAAO,CAAEG,KAAM,kBAAmB3B,GAAIwB,GEyCnBW,CAAiBX,GAChCF,EAASG,IAGRhB,EAAsB,SAACnB,EAAeU,GACvCsB,EFzC6B,SAAChC,EAAeU,GACjD,MAAO,CAAE2B,KAAM,wBAAyB3B,KAAIV,SEwC/B8C,CAAsB9C,EAAOU,KAS1C,OACI,yBAAKd,UAAU,OACX,kBAACmD,EAAA,EAAD,CAAQC,SAAU,UACd,kBAACC,EAAA,EAAD,KACI,kBAACzD,EAAA,EAAD,CAAY0D,KAAM,QAASxD,MAAO,UAAWwB,aAAY,WACrD,kBAACiC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYvE,QAAS,MAArB,QAGA,kBAACyC,EAAA,EAAD,CAAQ5B,MAAO,WAAf,WAGR,kBAAC2D,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAO,CAACC,QAAS,SAC7B,kBAAC,EAAD,CAAapE,QArBT,SAACU,GACjB,IAAMmC,EFhDe,SAACnC,GAC1B,MAAO,CAAEqC,KAAM,eAAgBrC,QAAOkC,WAAYP,eE+C/BgC,CAAc3D,GAC7BgC,EAASG,OAqBD,kBAACoB,EAAA,EAAD,CAAMC,WAAS,EAACI,QAAS,GAEjB/B,EAAUtB,KAAI,SAACsD,GAEX,IAAIC,EAAmBxD,EAAMuD,EAAEnD,IAS/B,MAPiB,cAAbmD,EAAErC,SACFsC,EAAmBA,EAAiBtC,QAAO,SAAAqC,GAAC,OAAIA,EAAElD,WAErC,WAAbkD,EAAErC,SACFsC,EAAmBA,EAAiBtC,QAAO,SAAAqC,GAAC,OAAKA,EAAElD,WAInD,kBAAC4C,EAAA,EAAD,CAAMQ,MAAI,GACN,kBAACC,EAAA,EAAD,CAAOP,MAAO,CAACC,QAAS,SACpB,kBAACrD,EAAD,CACIL,MAAO6D,EAAE7D,MACTS,IAAKoD,EAAEnD,GACPA,GAAImD,EAAEnD,GACNJ,MAAOwD,EACP7C,aAAcA,EACdQ,aAAcA,EACdJ,UAAWA,EACXP,iBAAkB2B,EAClBjB,OAAQqC,EAAErC,OACVJ,eAAgBA,EAChBJ,gBAAiBA,EACjBG,oBAAqBA,a,QCvH3D8C,EAAcC,YAAgB,CAChCrC,UHmC4B,WAAyF,IAAxFE,EAAuF,uDAA1DL,EAAcS,EAA4C,uCACpH,OAAQA,EAAOE,MACX,IAAK,kBACD,IAAI8B,EAAWpC,EAAMP,QAAO,SAACqC,GAAD,OAAOA,EAAEnD,KAAOyB,EAAOzB,MACnD,OAAOyD,EAEX,IAAK,eACD,MAAM,CAAG,CAACzD,GAAIyB,EAAOD,WAAYlC,MAAOmC,EAAOnC,MAAOwB,OAAQ,QAA9D,mBAAyEO,IAE7E,IAAK,wBACD,IAAMqC,EAAWrC,EAAMsC,MAAK,SAAAC,GAAE,OAAIA,EAAG5D,KAAOyB,EAAOzB,MAInD,OAHI0D,IACAA,EAASpE,MAAQmC,EAAOnC,OAErB,YAAI+B,GAEf,IAAK,yBACD,IAAIqC,EAAWrC,EAAMsC,MAAK,SAAAR,GAAC,OAAIA,EAAEnD,KAAOyB,EAAOzB,MAI/C,OAHI0D,IACAA,EAAS5C,OAASW,EAAOX,QAEtB,YAAIO,GAEf,QACI,OAAOA,IG1DfzB,MF6CwB,WAA+E,IAA9EyB,EAA6E,uDAArDL,EAAcS,EAAuC,uCACtG,OAAQA,EAAOE,MACX,IAAK,cACD,IAAIkC,EAAS,eAAOxC,GAChBzB,EAASyB,EAAMI,EAAOD,YACtBsC,EAAgBlE,EAAMkB,QAAO,SAAAqC,GAAC,OAAIA,EAAEnD,KAAOyB,EAAOC,UAEtD,OADAmC,EAAUpC,EAAOD,YAAcsC,EACxBD,EAEX,IAAK,WACD,IAAIE,EAAU,CAAC/D,GAAIiB,cAAM3B,MAAOmC,EAAOI,UAAW5B,QAAQ,GACtD4D,EAAS,eAAOxC,GAChBzB,EAAQyB,EAAMI,EAAOD,YACrBwC,EAAQ,CAAID,GAAJ,mBAAgBnE,IAE5B,OADAiE,EAAUpC,EAAOD,YAAcwC,EACxBH,EAEX,IAAK,iBACD,IAAMA,EAAS,eAAOxC,GAClBzB,EAAQyB,EAAMI,EAAOD,YACrB1B,EAAOF,EAAM+D,MAAK,SAAAR,GAAC,OAAIA,EAAEnD,KAAOyB,EAAOC,UAI3C,OAHI5B,IACAA,EAAKG,OAASwB,EAAOpD,OAElBwF,EAEX,IAAK,oBACD,IAAMA,EAAS,eAAOxC,GAClBzB,EAAQyB,EAAMI,EAAOD,YACrB1B,EAAOF,EAAM+D,MAAK,SAAAR,GAAC,OAAIA,EAAEnD,KAAOyB,EAAOC,UAI3C,OAHI5B,IACAA,EAAKR,MAAQmC,EAAOI,WAEjBgC,EAEX,IAAK,eACD,IAAMA,EAAS,eAAOxC,GAEtB,OADAwC,EAAUpC,EAAOD,YAAc,GACxBqC,EAEX,IAAK,kBACD,IAAMA,EAAS,eAAOxC,GAEtB,cADOwC,EAAUpC,EAAOzB,IACjB6D,EAGX,QACI,OAAOxC,MEvFN4C,EAAQC,YAAYX,GAGjChG,OAAO0G,MAAQA,ECLfE,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OAEAI,SAASC,eAAe,SR6H1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7G,GACL8G,QAAQ9G,MAAMA,EAAM+G,c","file":"static/js/main.c7b2ee4f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (newTaskTitle: string) => void\r\n}\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState(false);\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() === '') {\r\n            return setError(true)\r\n        }\r\n        props.addItem(newTaskTitle);\r\n        setNewTaskTitle(\"\")\r\n\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        if (e.charCode === 13) {\r\n            if (newTaskTitle.trim() === '') {\r\n                return setError(true)\r\n            }\r\n            props.addItem(newTaskTitle);\r\n            setNewTaskTitle(\"\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                label=\"Enter the title\"\r\n                value={newTaskTitle}\r\n                onChange={onNewTitleChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n            <IconButton\r\n                onClick={addTask}\r\n                color={\"primary\"}\r\n            >\r\n                <ControlPoint/>\r\n            </IconButton>\r\n            {error && <div className=\"error-message\">Field is required</div>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue:string) => void\r\n}\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    let [editMode, changeEditMode] = useState(false)\r\n    let [title, setTitle] = useState(props.value)\r\n\r\n\r\n    const activateEditMode = () => {\r\n        changeEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n    const  deactivateEditMode = () => {\r\n        changeEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={deactivateEditMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    onDeleteTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    onAddTask: (newTaskTitle: string, todoListId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    const onAllFilter = () => props.changeFilter(\"all\", props.id)\r\n    const onActiveFilter = () => props.changeFilter(\"active\", props.id)\r\n    const onCompletedFilter = () => props.changeFilter(\"completed\", props.id)\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.id)\r\n    }\r\n\r\n    let tasks = props.tasks.map(task => {\r\n\r\n        const onRemoveTask = () => {\r\n            props.onDeleteTask(task.id, props.id)\r\n        }\r\n        const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\r\n        }\r\n        const onChangeTitleHandler = (newValue: string) => {\r\n            props.changeTaskTitle(task.id, newValue, props.id)\r\n        }\r\n\r\n        return <div key={task.id} className={task.isDone === true ? \"done-task\" : \"\"}>\r\n            <Checkbox\r\n                      color={'primary'}\r\n                      checked={task.isDone}\r\n                      onChange={onChangeStatusHandler}\r\n            />\r\n            <EditableSpan value={task.title} onChange={onChangeTitleHandler}/>\r\n            <IconButton onClick={onRemoveTask} aria-label=\"delete\">\r\n                <DeleteIcon/>\r\n            </IconButton>\r\n        </div>\r\n\r\n    })\r\n\r\n    const onAddTask = (title: string) => {\r\n        props.onAddTask(title, props.id)\r\n    }\r\n\r\n    const changeTodoListTitleHandler = (newValue: string) => {\r\n        props.changeTodoListTitle(newValue, props.id)\r\n    }\r\n\r\n    debugger\r\n    return  <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodoListTitleHandler}/>\r\n            <IconButton onClick={removeTodoList} aria-label=\"delete\">\r\n                <DeleteIcon/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={onAddTask}/>\r\n        <ul>\r\n            {tasks}\r\n        </ul>\r\n        <div>\r\n            <Button\r\n                size={'small'}\r\n                variant={props.filter === \"all\" ? \"contained\" : 'text'}\r\n                onClick={onAllFilter}>All\r\n            </Button>\r\n            <Button\r\n                size={'small'}\r\n                color={'primary'}\r\n                variant={props.filter === \"active\" ? \"contained\" : 'text'}\r\n                onClick={onActiveFilter}>Active\r\n            </Button>\r\n            <Button\r\n                size={'small'}\r\n                color={'secondary'}\r\n                variant={props.filter === \"completed\" ? \"contained\" : 'text'}\r\n                onClick={onCompletedFilter}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import {FilterValuesType, TodoListType} from \"../App\";\r\nimport {v1} from 'uuid';\r\n\r\ntype ActionsType = RemoveTodoListActionType | AddTodoListActionType | ChangeTodoListTitleActionType | ChangeTodoListFilterActionType;\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTodoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string,\r\n    title: string\r\n}\r\nexport type ChangeTodoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string,\r\n    filter: FilterValuesType\r\n}\r\nexport const removeTodoListAC = (todoListId: string): RemoveTodoListActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todoListId}\r\n}\r\nexport const addTodoListAC = (title: string): AddTodoListActionType => {\r\n    return { type: 'ADD-TODOLIST', title, todoListId: v1()}\r\n}\r\nexport const changeTodoListTitleAC = (title: string, id: string): ChangeTodoListTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id, title}\r\n}\r\nexport const changeTodoListFilterAC = ( filter: FilterValuesType, id: string): ChangeTodoListFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER',filter, id}\r\n}\r\n\r\nexport let todoListId1 = v1()\r\nexport let todoListId2 = v1()\r\n\r\nconst initialState :Array<TodoListType> = []\r\n\r\nexport const todoListsReducer = (state: Array<TodoListType> = initialState, action: ActionsType):Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            let newState = state.filter((t) => t.id !== action.id)\r\n            return newState\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [ {id: action.todoListId, title: action.title, filter: 'all'}, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todoList = state.find(tl => tl.id === action.id);\r\n            if (todoList) {\r\n                todoList.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            let todoList = state.find(t => t.id === action.id)\r\n            if (todoList) {\r\n                todoList.filter = action.filter\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListActionType, RemoveTodoListActionType, todoListId1, todoListId2} from \"./todolists-reducer\";\r\n\r\n\r\ntype ActionsType = AddTaskActionType | RemoveTaskActionType | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType | AddTodoListActionType | RemoveTodoListActionType;\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    taskTitle: string,\r\n    todoListId: string\r\n}\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    taskId: string,\r\n    todoListId: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-ID',\r\n    taskId: string,\r\n    value: boolean,\r\n    todoListId: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    taskId: string,\r\n    taskTitle: string,\r\n    todoListId: string\r\n}\r\n\r\n\r\n\r\n\r\nexport const removeTaskAC = ( taskId: string, todoListId: string): RemoveTaskActionType => {\r\n    return { type: 'REMOVE-TASK', taskId, todoListId }\r\n}\r\nexport const addTaskAC = ( taskTitle: string, todoListId: string): AddTaskActionType => {\r\n    return { type: 'ADD-TASK', taskTitle ,  todoListId}\r\n}\r\nexport const changeTaskStatusAC = ( taskId: string,value:boolean, todoListId: string): ChangeTaskStatusActionType => {\r\n    return { type: 'CHANGE-TASK-ID', taskId, value,  todoListId}\r\n}\r\nexport const changeTaskTitleAC = ( taskId: string, taskTitle:string, todoListId: string): ChangeTaskTitleActionType => {\r\n    return { type: 'CHANGE-TASK-TITLE', taskId, taskTitle,  todoListId}\r\n}\r\nexport const addTodoListAC = (title: string): AddTodoListActionType => {\r\n    return { type: 'ADD-TODOLIST', title, todoListId: v1()}\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType):TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            let stateCopy = {...state};\r\n            let tasks =  state[action.todoListId];\r\n            let filteredTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todoListId] = filteredTasks;\r\n            return stateCopy ;\r\n        }\r\n        case \"ADD-TASK\": {\r\n            let newTask = {id: v1(), title: action.taskTitle, isDone: false}\r\n            let stateCopy = {...state};\r\n            let tasks = state[action.todoListId];\r\n            let newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todoListId] = newTasks;\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-ID': {\r\n            const stateCopy = {...state}\r\n            let tasks = state[action.todoListId];\r\n            let task = tasks.find(t => t.id === action.taskId);\r\n            if (task) {\r\n                task.isDone = action.value;\r\n            }\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            const stateCopy = {...state}\r\n            let tasks = state[action.todoListId];\r\n            let task = tasks.find(t => t.id === action.taskId);\r\n            if (task) {\r\n                task.title = action.taskTitle;\r\n            }\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoListId] = []\r\n            return stateCopy\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, TodoList} from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {\r\n    addTodoListAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    removeTodoListAC,\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\"\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [type: string]: Array<TaskType>\r\n}\r\nfunction AppWithRedux() {\r\n\r\n\r\n\r\n    const todoLists = useSelector<AppRootState, Array<TodoListType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootState, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const onDeleteTask = (id: string, todoListId: string) => {\r\n        const action = removeTaskAC(id, todoListId)\r\n        dispatch(action)\r\n    }\r\n\r\n    const onAddTask = (newTaskTitle: string, todoListId: string) => {\r\n        const action = addTaskAC(newTaskTitle, todoListId)\r\n        dispatch(action)\r\n    }\r\n\r\n\r\n    const changeStatus = (taskId: string, isDone: boolean, todoListId: string) => {\r\n        const action = changeTaskStatusAC(taskId, isDone, todoListId)\r\n        dispatch(action)\r\n    }\r\n\r\n    const changeTaskTitle = (taskId: string, newTitle: string, todoListId: string) => {\r\n        const action = changeTaskTitleAC(taskId, newTitle,todoListId)\r\n        dispatch(action)\r\n    }\r\n\r\n\r\n    const changeFilter = (value: FilterValuesType, todoListId: string) => {\r\n        const action = changeTodoListFilterAC(value, todoListId)\r\n        dispatch(action)\r\n\r\n    }\r\n\r\n    const removeTodoList = (todoListId: string) => {\r\n        const action = removeTodoListAC(todoListId)\r\n        dispatch(action)\r\n    }\r\n\r\n   const changeTodoListTitle = (title: string, id: string ) => {\r\n        dispatch(changeTodoListTitleAC(title, id))\r\n    }\r\n\r\n    const addTodoList = (title: string) => {\r\n        const action = addTodoListAC(title)\r\n        dispatch(action)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar>\r\n                    <IconButton edge={'start'} color={'inherit'} aria-label={'inherit'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        NEWS\r\n                    </Typography>\r\n                    <Button color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '30px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todoLists.map((t) => {\r\n\r\n                            let tasksForTodoList = tasks[t.id]\r\n\r\n                            if (t.filter === \"completed\") {\r\n                                tasksForTodoList = tasksForTodoList.filter(t => t.isDone)\r\n                            }\r\n                            if (t.filter === \"active\") {\r\n                                tasksForTodoList = tasksForTodoList.filter(t => !t.isDone)\r\n                            }\r\n\r\n                            return (\r\n                                <Grid item>\r\n                                    <Paper style={{padding: '10px'}}>\r\n                                        <TodoList\r\n                                            title={t.title}\r\n                                            key={t.id}\r\n                                            id={t.id}\r\n                                            tasks={tasksForTodoList}\r\n                                            onDeleteTask={onDeleteTask}\r\n                                            changeFilter={changeFilter}\r\n                                            onAddTask={onAddTask}\r\n                                            changeTaskStatus={changeStatus}\r\n                                            filter={t.filter}\r\n                                            removeTodoList={removeTodoList}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeTodoListTitle={changeTodoListTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todoListsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport type  AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithReducers from \"./AppWithReducers\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>,\r\n        document.getElementById('root')\r\n\r\n   );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
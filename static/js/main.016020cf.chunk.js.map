{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","TextField","variant","label","value","onChange","e","currentTarget","onKeyPress","charCode","trim","addItem","helperText","IconButton","onClick","color","ControlPoint","className","EditableSpan","editMode","changeEditMode","title","changeTitle","autoFocus","onBlur","onDoubleClick","TodoList","tasks","map","task","key","id","isDone","Checkbox","checked","changeTaskStatus","newValue","changeTaskTitle","onDeleteTask","aria-label","newTitle","changeTodoListTitle","removeTodoList","onAddTask","Button","size","filter","changeFilter","todoListId1","v1","todoListId2","initialState","AppWithRedux","dispatch","useDispatch","todoLists","useSelector","state","todoListId","action","taskId","type","removeTaskAC","taskTitle","addTaskAC","changeStatus","changeTaskStatusAC","changeTaskTitleAC","RemoveTodoListAC","ChangeTodoListTitleAC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","style","padding","AddTodoListAC","spacing","t","tasksForTodoList","item","Paper","rootReducer","combineReducers","newState","todoList","find","stateCopy","filteredTasks","newTask","newTasks","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.016020cf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (newTaskTitle: string) => void\r\n}\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState(false);\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() === '') {\r\n            return setError(true)\r\n        }\r\n        props.addItem(newTaskTitle);\r\n        setNewTaskTitle(\"\")\r\n\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        if (e.charCode === 13) {\r\n            if (newTaskTitle.trim() === '') {\r\n                return setError(true)\r\n            }\r\n            props.addItem(newTaskTitle);\r\n            setNewTaskTitle(\"\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                label=\"Enter the title\"\r\n                value={newTaskTitle}\r\n                onChange={onNewTitleChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n            <IconButton\r\n                onClick={addTask}\r\n                color={\"primary\"}\r\n            >\r\n                <ControlPoint/>\r\n            </IconButton>\r\n            {error && <div className=\"error-message\">Field is required</div>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue:string) => void\r\n}\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    let [editMode, changeEditMode] = useState(false)\r\n    let [title, changeTitle] = useState(props.title)\r\n    let onChangeTitleHandler = (e:ChangeEvent<HTMLInputElement>) => changeTitle(e.currentTarget.value)\r\n\r\n    let activateEditMode = () => {\r\n        changeEditMode(true)\r\n\r\n    }\r\n\r\n    let deactivateEditMode = () => {\r\n        changeEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={onChangeTitleHandler} autoFocus={true} onBlur={deactivateEditMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    onDeleteTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    onAddTask: (newTaskTitle: string, todoListId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    const onAllFilter = () => props.changeFilter(\"all\", props.id)\r\n    const onActiveFilter = () => props.changeFilter(\"active\", props.id)\r\n    const onCompletedFilter = () => props.changeFilter(\"completed\", props.id)\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.id)\r\n    }\r\n\r\n    let tasks = props.tasks.map(task => {\r\n\r\n        const onRemoveTask = () => {\r\n            props.onDeleteTask(task.id, props.id)\r\n        }\r\n        const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\r\n        }\r\n        const onChangeTitleHandler = (newValue: string) => {\r\n            props.changeTaskTitle(task.id, newValue, props.id)\r\n        }\r\n\r\n        return <div key={task.id} className={task.isDone === true ? \"done-task\" : \"\"}>\r\n            <Checkbox\r\n                      color={'primary'}\r\n                      checked={task.isDone}\r\n                      onChange={onChangeStatusHandler}\r\n            />\r\n            <EditableSpan title={task.title} onChange={onChangeTitleHandler}/>\r\n            <IconButton onClick={onRemoveTask} aria-label=\"delete\">\r\n                <DeleteIcon/>\r\n            </IconButton>\r\n        </div>\r\n\r\n    })\r\n\r\n    const onAddTask = (title: string) => {\r\n        props.onAddTask(title, props.id)\r\n    }\r\n\r\n    const changeTodoListTitle = (newTitle: string) => {\r\n        props.changeTodoListTitle(props.id, newTitle)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} onChange={changeTodoListTitle}/>\r\n            <IconButton onClick={removeTodoList} aria-label=\"delete\">\r\n                <DeleteIcon/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={onAddTask}/>\r\n        <ul>\r\n            {tasks}\r\n        </ul>\r\n        <div>\r\n            <Button\r\n                size={'small'}\r\n                variant={props.filter === \"all\" ? \"contained\" : 'text'}\r\n                onClick={onAllFilter}>All\r\n            </Button>\r\n            <Button\r\n                size={'small'}\r\n                color={'primary'}\r\n                variant={props.filter === \"active\" ? \"contained\" : 'text'}\r\n                onClick={onActiveFilter}>Active\r\n            </Button>\r\n            <Button\r\n                size={'small'}\r\n                color={'secondary'}\r\n                variant={props.filter === \"completed\" ? \"contained\" : 'text'}\r\n                onClick={onCompletedFilter}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import {FilterValuesType, TodoListType} from \"../App\";\r\nimport {v1} from 'uuid';\r\n\r\ntype ActionsType = RemoveTodoListActionType | AddTodoListActionType | ChangeTodoListTitleActionType | ChangeTodoListFilterActionType;\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTodoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string,\r\n    title: string\r\n}\r\nexport type ChangeTodoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string,\r\n    filter: FilterValuesType\r\n}\r\nexport const RemoveTodoListAC = (todoListId: string): RemoveTodoListActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todoListId}\r\n}\r\nexport const AddTodoListAC = (title: string): AddTodoListActionType => {\r\n    return { type: 'ADD-TODOLIST', title, todoListId: v1()}\r\n}\r\nexport const ChangeTodoListTitleAC = (title: string, id: string): ChangeTodoListTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', title: title, id: id}\r\n}\r\nexport const ChangeTodoListFilterAC = ( filter: FilterValuesType, id: string): ChangeTodoListFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', filter: filter, id: id}\r\n}\r\n\r\nexport let todoListId1 = v1()\r\nexport let todoListId2 = v1()\r\n\r\nconst initialState :Array<TodoListType> = [\r\n    {id: todoListId1, title: \"what to learn\", filter: \"all\"},\r\n    {id: todoListId2, title: \"what to buy\", filter: \"all\"},\r\n]\r\n\r\nexport const todoListsReducer = (state: Array<TodoListType> = initialState, action: ActionsType):Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            let newState = state.filter((t) => t.id !== action.id)\r\n            return newState\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [ {id: action.todoListId, title: action.title, filter: 'all'}, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            let todoList = state.find(t => t.id === action.id)\r\n            if (todoList) {\r\n                todoList.title = action.title\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            let todoList = state.find(t => t.id === action.id)\r\n            if (todoList) {\r\n                todoList.filter = action.filter\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListActionType, RemoveTodoListActionType, todoListId1, todoListId2} from \"./todolists-reducer\";\r\n\r\n\r\ntype ActionsType = AddTaskActionType | RemoveTaskActionType | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType | AddTodoListActionType | RemoveTodoListActionType;\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    taskTitle: string,\r\n    todoListId: string\r\n}\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    taskId: string,\r\n    todoListId: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-ID',\r\n    taskId: string,\r\n    value: boolean,\r\n    todoListId: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    taskId: string,\r\n    taskTitle: string,\r\n    todoListId: string\r\n}\r\n\r\n\r\n\r\n\r\nexport const removeTaskAC = ( taskId: string, todoListId: string): RemoveTaskActionType => {\r\n    return { type: 'REMOVE-TASK', taskId, todoListId }\r\n}\r\nexport const addTaskAC = ( taskTitle: string, todoListId: string): AddTaskActionType => {\r\n    return { type: 'ADD-TASK', taskTitle ,  todoListId}\r\n}\r\nexport const changeTaskStatusAC = ( taskId: string,value:boolean, todoListId: string): ChangeTaskStatusActionType => {\r\n    return { type: 'CHANGE-TASK-ID', taskId, value,  todoListId}\r\n}\r\nexport const changeTaskTitleAC = ( taskId: string, taskTitle:string, todoListId: string): ChangeTaskTitleActionType => {\r\n    return { type: 'CHANGE-TASK-TITLE', taskId, taskTitle,  todoListId}\r\n}\r\nexport const addTodoListAC = (title: string): AddTodoListActionType => {\r\n    return { type: 'ADD-TODOLIST', title, todoListId: v1()}\r\n}\r\n\r\nconst initialState: TasksStateType = {\r\n    [todoListId1]: [\r\n        {id: v1(), title: \"HTML & CSS\", isDone: false},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"ReactJS\", isDone: false}],\r\n    [todoListId2]: [\r\n        {id: v1(), title: \"Books\", isDone: false},\r\n        {id: v1(), title: \"Courses\", isDone: true},\r\n        {id: v1(), title: \"Soft\", isDone: false}\r\n    ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType):TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            let stateCopy = {...state};\r\n            let tasks =  state[action.todoListId];\r\n            let filteredTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todoListId] = filteredTasks;\r\n            return stateCopy ;\r\n        }\r\n        case \"ADD-TASK\": {\r\n            let newTask = {id: v1(), title: action.taskTitle, isDone: false}\r\n            let stateCopy = {...state};\r\n            let tasks = state[action.todoListId];\r\n            let newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todoListId] = newTasks;\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-ID': {\r\n            const stateCopy = {...state}\r\n            let tasks = state[action.todoListId];\r\n            let task = tasks.find(t => t.id === action.taskId);\r\n            if (task) {\r\n                task.isDone = action.value;\r\n            }\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            const stateCopy = {...state}\r\n            let tasks = state[action.todoListId];\r\n            let task = tasks.find(t => t.id === action.taskId);\r\n            if (task) {\r\n                task.title = action.taskTitle;\r\n            }\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoListId] = []\r\n            return stateCopy\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {\r\n    AddTodoListAC,\r\n    ChangeTodoListFilterAC,\r\n    ChangeTodoListTitleAC,\r\n    RemoveTodoListAC,\r\n    todoListsReducer\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\"\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [type: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    let todoListId1 = v1()\r\n    let todoListId2 = v1()\r\n\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<AppRootState, Array<TodoListType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootState, TasksStateType>(state => state.tasks)\r\n\r\n\r\n\r\n    const onDeleteTask = (id: string, todoListId: string) => {\r\n        const action = removeTaskAC(id, todoListId)\r\n        dispatch(action)\r\n    }\r\n\r\n    const onAddTask = (newTaskTitle: string, todoListId: string) => {\r\n        const action = addTaskAC(newTaskTitle, todoListId)\r\n        dispatch(action)\r\n    }\r\n\r\n\r\n    const changeStatus = (taskId: string, isDone: boolean, todoListId: string) => {\r\n        const action = changeTaskStatusAC(taskId, isDone, todoListId)\r\n        dispatch(action)\r\n    }\r\n\r\n    const changeTaskTitle = (taskId: string, newTitle: string, todoListId: string) => {\r\n        const action = changeTaskTitleAC(taskId, newTitle,todoListId)\r\n        dispatch(action)\r\n    }\r\n\r\n\r\n    const changeFilter = (value: FilterValuesType, todoListId: string) => {\r\n        const action = ChangeTodoListFilterAC(value, todoListId)\r\n        dispatch(action)\r\n\r\n    }\r\n\r\n    let removeTodoList = (todoListId: string) => {\r\n        const action = RemoveTodoListAC(todoListId)\r\n        dispatch(action)\r\n    }\r\n\r\n    let changeTodoListTitle = (id: string, newTitle: string) => {\r\n        const action = ChangeTodoListTitleAC(id, newTitle)\r\n        dispatch(action)\r\n\r\n    }\r\n\r\n    const addTodoList = (title: string) => {\r\n        const action = AddTodoListAC(title)\r\n        dispatch(action)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar>\r\n                    <IconButton edge={'start'} color={'inherit'} aria-label={'inherit'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        NEWS\r\n                    </Typography>\r\n                    <Button color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '30px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todoLists.map((t) => {\r\n\r\n                            let tasksForTodoList = tasks[t.id]\r\n\r\n                            if (t.filter === \"completed\") {\r\n                                tasksForTodoList = tasksForTodoList.filter(t => t.isDone)\r\n                            }\r\n                            if (t.filter === \"active\") {\r\n                                tasksForTodoList = tasksForTodoList.filter(t => !t.isDone)\r\n                            }\r\n\r\n                            return (\r\n                                <Grid item>\r\n                                    <Paper style={{padding: '10px'}}>\r\n                                        <TodoList\r\n                                            title={t.title}\r\n                                            key={t.id}\r\n                                            id={t.id}\r\n                                            tasks={tasksForTodoList}\r\n                                            onDeleteTask={onDeleteTask}\r\n                                            changeFilter={changeFilter}\r\n                                            onAddTask={onAddTask}\r\n                                            changeTaskStatus={changeStatus}\r\n                                            filter={t.filter}\r\n                                            removeTodoList={removeTodoList}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeTodoListTitle={changeTodoListTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todoListsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport type  AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithReducers from \"./AppWithReducers\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>,\r\n        document.getElementById('root')\r\n\r\n   );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}